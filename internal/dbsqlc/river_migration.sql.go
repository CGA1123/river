// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: river_migration.sql

package dbsqlc

import (
	"context"
)

const riverMigrationDeleteByVersionMany = `-- name: RiverMigrationDeleteByVersionMany :one
DELETE FROM river_migration
WHERE version = any($1::bigint[])
RETURNING id, created_at, version
`

func (q *Queries) RiverMigrationDeleteByVersionMany(ctx context.Context, db DBTX, version []int64) (*RiverMigration, error) {
	row := db.QueryRow(ctx, riverMigrationDeleteByVersionMany, version)
	var i RiverMigration
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Version)
	return &i, err
}

const riverMigrationGetAll = `-- name: RiverMigrationGetAll :many
SELECT id, created_at, version
FROM river_migration
ORDER BY version
`

func (q *Queries) RiverMigrationGetAll(ctx context.Context, db DBTX) ([]*RiverMigration, error) {
	rows, err := db.Query(ctx, riverMigrationGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*RiverMigration
	for rows.Next() {
		var i RiverMigration
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.Version); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const riverMigrationInsert = `-- name: RiverMigrationInsert :one
INSERT INTO river_migration (
  version
) VALUES (
  $1
) RETURNING id, created_at, version
`

func (q *Queries) RiverMigrationInsert(ctx context.Context, db DBTX, version int64) (*RiverMigration, error) {
	row := db.QueryRow(ctx, riverMigrationInsert, version)
	var i RiverMigration
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Version)
	return &i, err
}

const riverMigrationInsertMany = `-- name: RiverMigrationInsertMany :many
INSERT INTO river_migration (
  version
)
SELECT
  unnest($1::bigint[])
RETURNING id, created_at, version
`

func (q *Queries) RiverMigrationInsertMany(ctx context.Context, db DBTX, version []int64) ([]*RiverMigration, error) {
	rows, err := db.Query(ctx, riverMigrationInsertMany, version)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*RiverMigration
	for rows.Next() {
		var i RiverMigration
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.Version); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
